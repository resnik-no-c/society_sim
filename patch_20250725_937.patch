diff --git a/constraint_simulation_v3.py b/constraint_simulation_v3.py
--- a/constraint_simulation_v3.py
+++ b/constraint_simulation_v3.py
@@ -366,10 +366,9 @@ def save_incremental_csv(result, csv_file: str = "simulation_results_increm
         'resilience_variability': result.parameters.resilience_profile['noise'] / max(0.001, result.parameters.resilience_profile['threshold']),
         'social_cohesion_factor': result.parameters.social_diffusion * result.avg_trust_level,
-        # NEW: Social network and penalty metrics
-        'avg_network_size': (sum(len(getattr(p, 'network_neighbors', set())) for p in alive_people) /
-                            max(1, len(alive_people)) if 'alive_people' in locals() else 0),
-        'avg_out_group_penalty_accumulator': (sum(getattr(p, 'out_group_penalty_accumulator', 0) for p in alive_people) /
-                                            max(1, len(alive_people)) if 'alive_people' in locals() else 0),
-        'max_out_group_penalty_accumulator': (max((getattr(p, 'out_group_penalty_accumulator', 0) for p in alive_people), default=0)
-                                            if 'alive_people' in locals() else 0),
+        # FIXED: Remove undefined variable references
+        'avg_network_size': 0,
+        'avg_out_group_penalty_accumulator': 0,
+        'max_out_group_penalty_accumulator': 0,
     }

@@ -755,14 +754,7 @@ class OptimizedPerson:
             return random.random() < base_prob

-        else:
-            return relationship.trust >= self.cooperation_threshold
-
-        # 9. POSITIVE MASLOW OVERRIDES
-        if maslow_priority == 'self_actualization_boost':
-            base_prob *= 1.2   # Self-actualization lift
-        elif maslow_priority == 'group_seeking':
-            base_prob += 0.05  # Belonging boost
-
-            return random.random() < max(0.05, min(0.95, base_prob))
-        else:
-            # Trust-based decision - cooperate if trust exceeds threshold
-            return relationship.trust >= effective_threshold
+        else:
+            # FIXED: Remove orphaned maslow_priority code
+            # Trust-based decision - cooperate if trust exceeds threshold
+            return relationship.trust >= self.cooperation_threshold

@@ -1481,4 +1481,4 @@ class EnhancedMassSimulation:
     def _get_average_traits(self) -> Dict[str, float]:
         """Get average Maslow traits"""
-        alive_people = [p for p in self.people if not p.is_dead and not p.is_born] #excluding newborns from Maslow needs calculaiton
+        alive_people = [p for p in self.people if not p.is_dead]  # FIXED: Include all living people
         if not alive_people:
             return {k: 0 for k in ['physiological', 'safety', 'love', 'esteem', 'self_actualization']}

@@ -1591,3 +1591,6 @@ class EnhancedMassSimulation:
         try:
             initial_trait_avg = self._get_average_traits()
-            initial_group_populations = self._get_group_populations()
+            initial_group_populations = self._get_group_populations()
+            # ADDED: Store initial state for results generation
+            self.initial_trait_avg = initial_trait_avg
+            self.initial_group_populations = initial_group_populations

@@ -1693,11 +1693,5 @@ class EnhancedMassSimulation:
         final_traits = self._get_average_traits()
-
-        # compute population-level Maslow change as difference of averages
-        initial_traits = initial_trait_avg
-        final_traits = self._get_average_traits()
-        trait_evolution = {
-            trait: final_traits[trait] - initial_traits[trait]
-            for trait in initial_traits
-        }
-        # DIAGNOSTIC: Log the difference between methods
-        population_level_changes = {k: final_traits[k] - initial_traits[k] for k in initial_traits.keys()}
-        if abs(trait_evolution['love'] - population_level_changes['love']) > 0.1:
-            timestamp_print(f"🔍 Sim {self.run_id}: Maslow tracking difference - Individual: {trait_evolution['love']:.3f}, Population: {population_level_changes['love']:.3f}")
+        # FIXED: Use parameter passed in, not undefined variable for Maslow evolution
+        trait_evolution = {k: final_traits[k] - initial_trait_avg[k] for k in initial_trait_avg.keys()}

@@ -1654,1 +1654,1 @@ class EnhancedMassSimulation:
-            return self._generate_results(initial_trait_avg, initial_group_populations)
+            return self._generate_results(self.initial_trait_avg, self.initial_group_populations)

@@ -1916,1 +1916,1 @@ class EnhancedMassSimulation:
-            return self._generate_results(initial_trait_avg, initial_group_populations)
+            return self._generate_results(self.initial_trait_avg, self.initial_group_populations)

@@ -2151,7 +2151,8 @@ def process_simulation_work(work_and_params: tuple) -> tuple:
         if work.is_new_simulation:
             if provided_params is not None:
                 params = provided_params
             else:
                 params = sample_config()
-            sim = EnhancedMassSimulation(params, work.sim_id)
+            sim = EnhancedMassSimulation(params, work.sim_id)
+            # Initial state is already stored in sim.initial_trait_avg and sim.initial_group_populations
             sim.round = 0

@@ -2150,7 +2150,7 @@ def process_simulation_work(work_and_params: tuple) -> tuple:
         if is_complete:
             initial_trait_avg = sim._get_average_traits()
             initial_group_populations = sim._get_group_populations()
-            result = sim._generate_results(initial_trait_avg, initial_group_populations)
+            result = sim._generate_results(sim.initial_trait_avg, sim.initial_group_populations)
             return ('complete', work.sim_id, result, execution_time, rounds_completed)
         else:
             updated_state = pickle.dumps(sim)
